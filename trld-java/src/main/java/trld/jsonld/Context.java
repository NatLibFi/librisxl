/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/jsonld/context.py
 */
package trld.jsonld;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.Common.loadJson;
import static trld.Common.warning;
import static trld.Common.resolveIri;
import static trld.jsonld.Base.*;

public class Context { // LINE: 70

  public static final String DEFAULT_PROCESSING_MODE = JSONLD11; // LINE: 6
  public static final Integer MAX_REMOTE_CONTEXTS = 512; // LINE: 8
  public static final String LOAD_PROFILE = "http://www.w3.org/ns/json-ld#context"; // LINE: 10

  public Map</*@Nullable*/ String, Term> terms; // LINE: 72
  public String baseIri; // LINE: 73
  public /*@Nullable*/ String originalBaseUrl; // LINE: 74
  public /*@Nullable*/ Map inverseContext; // LINE: 76
  public /*@Nullable*/ String vocabularyMapping; // LINE: 78
  public /*@Nullable*/ String defaultLanguage; // LINE: 79
  public /*@Nullable*/ String defaultBaseDirection; // LINE: 80
  public Boolean propagate; // LINE: 82
  public /*@Nullable*/ Context previousContext; // LINE: 83
  public String processingMode; // LINE: 85
  public /*@Nullable*/ Double version; // LINE: 86

  public Context(/*@Nullable*/ String baseIri) {
    this(baseIri, null);
  }
  public Context(/*@Nullable*/ String baseIri, /*@Nullable*/ String originalBaseUrl) { // LINE: 90
    this.initialize(baseIri, originalBaseUrl); // LINE: 91
  }

  public void initialize(/*@Nullable*/ String baseIri) {
    this.initialize(baseIri, null);
  }
  public void initialize(/*@Nullable*/ String baseIri, /*@Nullable*/ String originalBaseUrl) { // LINE: 93
    this.terms = new HashMap<>(); // LINE: 94
    this.baseIri = (baseIri == null ? "" : baseIri); // LINE: 96
    if (originalBaseUrl != null) { // LINE: 97
      this.originalBaseUrl = originalBaseUrl; // LINE: 98
    } else {
      this.originalBaseUrl = null; // LINE: 100
    }
    this.vocabularyMapping = null; // LINE: 102
    this.defaultLanguage = null; // LINE: 103
    this.defaultBaseDirection = null; // LINE: 104
    this.propagate = true; // LINE: 105
    this.previousContext = null; // LINE: 106
    this.processingMode = DEFAULT_PROCESSING_MODE; // LINE: 107
    this.version = null; // LINE: 108
    this.inverseContext = null; // LINE: 109
  }

  public Context copy() { // LINE: 112
    Context cloned = new Context(this.baseIri, this.originalBaseUrl); // LINE: 113
    cloned.terms = new HashMap(this.terms); // LINE: 114
    cloned.vocabularyMapping = (String) this.vocabularyMapping; // LINE: 115
    cloned.defaultLanguage = (String) this.defaultLanguage; // LINE: 116
    cloned.defaultBaseDirection = (String) this.defaultBaseDirection; // LINE: 117
    cloned.processingMode = (String) this.processingMode; // LINE: 118
    return cloned; // LINE: 119
  }

  public Context getContext(Object contextData) {
    return this.getContext(contextData, null);
  }
  public Context getContext(Object contextData, String baseUrl) {
    return this.getContext(contextData, baseUrl, null);
  }
  public Context getContext(Object contextData, String baseUrl, Set<String> remoteContexts) {
    return this.getContext(contextData, baseUrl, remoteContexts, false);
  }
  public Context getContext(Object contextData, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected) {
    return this.getContext(contextData, baseUrl, remoteContexts, overrideProtected, true);
  }
  public Context getContext(Object contextData, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) { // LINE: 121
    if (remoteContexts == null) { // LINE: 126
      remoteContexts = new HashSet(); // LINE: 127
    }
    Context localContext = (Context) this.copy(); // LINE: 129
    if (contextData instanceof Map) { // LINE: 131
      Object propagate = (Object) ((Map) contextData).get(PROPAGATE); // LINE: 132
      if (propagate instanceof Boolean) { // LINE: 133
        localContext.propagate = (Boolean) propagate; // LINE: 134
      }
    }
    if (localContext.previousContext == null) { // LINE: 140
      localContext.previousContext = this; // LINE: 141
    }
    localContext.readContext(contextData, baseUrl, remoteContexts, overrideProtected, validateScoped); // LINE: 143
    return localContext; // LINE: 146
  }

  protected void readContext(Object contextData, /*@Nullable*/ String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) { // LINE: 148
    List<Object> normalizedContextData; // LINE: 155
    if (contextData instanceof List) { // LINE: 156
      normalizedContextData = (List) contextData; // LINE: 157
    } else {
      normalizedContextData = new ArrayList<>(Arrays.asList(new Object[] {(Object) contextData})); // LINE: 159
    }
    if (baseUrl == null) { // LINE: 161
      baseUrl = (String) this.baseIri; // LINE: 162
    }
    for (Object context : normalizedContextData) { // LINE: 165
      if (context == null) { // LINE: 167
        if ((overrideProtected == false && this.terms.values().stream().anyMatch(term -> term.isProtected))) { // LINE: 169
          throw new InvalidContextNullificationError(); // LINE: 171
        }
        /*@Nullable*/ Context prev = (this.propagate == false ? this.copy() : null); // LINE: 174
        this.initialize(baseUrl, baseUrl); // LINE: 175
        if (prev != null) { // LINE: 176
          this.previousContext = prev; // LINE: 177
        }
        continue; // LINE: 179
      }
      if (context instanceof String) { // LINE: 182
        this.readContextLink((String) context, baseUrl, remoteContexts, overrideProtected, validateScoped); // LINE: 183
      } else if (context instanceof Map) { // LINE: 186
        this.readContextDefinition((Map) context, baseUrl, remoteContexts, overrideProtected, validateScoped); // LINE: 187
      } else {
        throw new InvalidLocalContextError(); // LINE: 191
      }
    }
  }

  protected void readContextLink(String href, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) { // LINE: 193
    try { // LINE: 197
      href = resolveIri(baseUrl, href); // LINE: 198
    } catch (Exception e) { // LINE: 199
      throw new LoadingDocumentFailedError(); // LINE: 200
    }
    if ((!(validateScoped) && remoteContexts.contains(href))) { // LINE: 202
      return; // LINE: 203
    }
    if (remoteContexts.size() > MAX_REMOTE_CONTEXTS) { // LINE: 205
      throw new ContextOverflowError(); // LINE: 206
    } else {
      remoteContexts.add(href); // LINE: 208
    }
    Object contextDocument = (Object) this.loadDocument(href); // LINE: 210
    if ((!(contextDocument instanceof Map) || !((Map) contextDocument).containsKey(CONTEXT))) { // LINE: 212
      throw new InvalidRemoteContextError(); // LINE: 213
    }
    Object loaded = (Object) ((Map) contextDocument).get(CONTEXT); // LINE: 215
    this.readContext(loaded, href, new HashSet(remoteContexts), overrideProtected, validateScoped); // LINE: 218
  }

  protected Object loadDocument(String href) {
    return this.loadDocument(href, LOAD_PROFILE);
  }
  protected Object loadDocument(String href, String profile) {
    return this.loadDocument(href, profile, LOAD_PROFILE);
  }
  protected Object loadDocument(String href, String profile, String requestProfile) { // LINE: 226
    /* ... */; // LINE: 236
    return loadJson(href); // LINE: 238
  }

  protected void readContextDefinition(Map<String, Object> context, String baseUrl, Set<String> remoteContexts, Boolean overrideProtected, Boolean validateScoped) { // LINE: 240
    Object version = (Object) context.get(VERSION); // LINE: 246
    if (version != null) { // LINE: 247
      if ((this.processingMode == null && ((Object) JSONLD10) == null || this.processingMode != null && (this.processingMode).equals(JSONLD10))) { // LINE: 248
        throw new ProcessingModeConflictError(); // LINE: 249
      }
      if ((version instanceof Double && (version == null && ((Object) 1.1) == null || version != null && (version).equals(1.1)))) { // LINE: 250
        this.version = (Double) version; // LINE: 251
      } else {
        throw new InvalidVersionValueError(); // LINE: 253
      }
    }
    if (context.containsKey(IMPORT)) { // LINE: 256
      context = this.handleImport(context, baseUrl); // LINE: 257
    }
    if ((context.containsKey(BASE) && remoteContexts.size() == 0)) { // LINE: 260
      Object base = (Object) context.get(BASE); // LINE: 262
      if (base == null) { // LINE: 264
        this.baseIri = ""; // LINE: 266
      } else if ((this.baseIri != null && base instanceof String)) { // LINE: 269
        this.baseIri = resolveIri(this.baseIri, (String) base); // LINE: 270
      } else if ((base instanceof String && isIri((String) base))) { // LINE: 271
        this.baseIri = (String) base; // LINE: 272
      } else {
        throw new InvalidBaseIriError(); // LINE: 275
      }
    }
    if (context.containsKey(VOCAB)) { // LINE: 278
      Object vocab = (Object) context.get(VOCAB); // LINE: 280
      if (vocab == null) { // LINE: 282
        this.vocabularyMapping = null; // LINE: 283
      } else if ((vocab instanceof String && (isIriRef((String) vocab) || isBlank((String) vocab)))) { // LINE: 285
        this.vocabularyMapping = (String) this.expandDocRelativeVocabIri((String) vocab); // LINE: 286
      } else {
        throw new InvalidVocabMappingError(); // LINE: 290
      }
    }
    if (context.containsKey(LANGUAGE)) { // LINE: 293
      Object lang = (Object) context.get(LANGUAGE); // LINE: 294
      if (lang == null) { // LINE: 295
        this.defaultLanguage = null; // LINE: 296
      } else if (lang instanceof String) { // LINE: 297
        if (!(isLangTag((String) lang))) { // LINE: 298
          warning("Language tag " + lang + " in context is not well-formed"); // LINE: 299
        }
        this.defaultLanguage = ((String) lang).toLowerCase(); // LINE: 300
      } else {
        throw new InvalidDefaultLanguageError(); // LINE: 302
      }
    }
    if (context.containsKey(DIRECTION)) { // LINE: 305
      Object direction = (Object) context.get(DIRECTION); // LINE: 306
      if ((direction == null || (direction instanceof String && DIRECTIONS.contains(direction)))) { // LINE: 307
        this.defaultBaseDirection = (String) direction; // LINE: 308
      } else {
        throw new InvalidBaseDirectionError(direction.toString()); // LINE: 310
      }
    }
    if (context.containsKey(PROPAGATE)) { // LINE: 313
      Object propagate = (Object) context.get(PROPAGATE); // LINE: 314
      if ((this.processingMode == null && ((Object) JSONLD10) == null || this.processingMode != null && (this.processingMode).equals(JSONLD10))) { // LINE: 316
        throw new InvalidContextEntryError(); // LINE: 317
      }
      if (!(propagate instanceof Boolean)) { // LINE: 319
        throw new InvalidPropagateValueError(propagate.toString()); // LINE: 320
      }
    }
    Map<String, Boolean> defined = new HashMap<>(); // LINE: 325
    for (Map.Entry<String, Object> key_value : context.entrySet()) { // LINE: 328
      String key = key_value.getKey();
      Object value = key_value.getValue();
      if (CONTEXT_KEYWORDS.contains(key)) { // LINE: 329
        continue; // LINE: 330
      }
      Boolean isprotected = (Boolean) ((Boolean) context.get(PROTECTED)); // LINE: 340
      new Term(this, context, key, value, defined, baseUrl, isprotected, overrideProtected); // LINE: 341
    }
  }

  protected Map handleImport(Map<String, Object> context, String baseUrl) { // LINE: 343
    Object importValue = (Object) context.get(IMPORT); // LINE: 344
    if ((this.processingMode == null && ((Object) JSONLD10) == null || this.processingMode != null && (this.processingMode).equals(JSONLD10))) { // LINE: 346
      throw new InvalidContextEntryError(); // LINE: 347
    }
    if (!(importValue instanceof String)) { // LINE: 349
      throw new InvalidImportValueError(importValue.toString()); // LINE: 350
    }
    importValue = resolveIri(baseUrl, (String) importValue); // LINE: 352
    Object contextDocument = (Object) this.loadDocument((String) importValue); // LINE: 354
    if ((!(contextDocument instanceof Map) || !((Map) contextDocument).containsKey(CONTEXT))) { // LINE: 358
      throw new InvalidRemoteContextError(); // LINE: 359
    }
    Object importContext = (Object) ((Map) contextDocument).get(CONTEXT); // LINE: 360
    if (!(importContext instanceof Map)) { // LINE: 361
      throw new InvalidRemoteContextError(); // LINE: 362
    }
    if (((Map) importContext).containsKey(IMPORT)) { // LINE: 364
      throw new InvalidContextEntryError(); // LINE: 365
    }
    ((Map) importContext).putAll(context); // LINE: 367
    ((Map) importContext).remove(IMPORT); // LINE: 368
    return (Map) importContext; // LINE: 369
  }

  public /*@Nullable*/ String expandVocabIri(String value) { // LINE: 371
    return this.expandIri(value, null, null, false, true); // LINE: 372
  }

  public /*@Nullable*/ String expandDocRelativeIri(String value) { // LINE: 374
    return this.expandIri(value, null, null, true, false); // LINE: 375
  }

  public /*@Nullable*/ String expandDocRelativeVocabIri(String value) { // LINE: 377
    return this.expandIri(value, null, null, true, true); // LINE: 378
  }

  protected /*@Nullable*/ String expandInitVocabIri(String value, Map<String, Object> localContext, Map<String, Boolean> defined) { // LINE: 380
    return this.expandIri(value, localContext, defined, false, true); // LINE: 385
  }

  public /*@Nullable*/ String expandIri(String value) {
    return this.expandIri(value, null);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext) {
    return this.expandIri(value, localContext, null);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext, /*@Nullable*/ Map<String, Boolean> defined) {
    return this.expandIri(value, localContext, defined, false);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext, /*@Nullable*/ Map<String, Boolean> defined, Boolean docRelative) {
    return this.expandIri(value, localContext, defined, docRelative, false);
  }
  public /*@Nullable*/ String expandIri(String value, /*@Nullable*/ Map<String, Object> localContext, /*@Nullable*/ Map<String, Boolean> defined, Boolean docRelative, Boolean vocab) { // LINE: 388
    if ((KEYWORDS.contains(value) || value == null)) { // LINE: 395
      return value; // LINE: 396
    }
    if (hasKeywordForm(value)) { // LINE: 399
      warning("Id " + value + " looks like a keyword"); // LINE: 400
      return null; // LINE: 401
    }
    if ((localContext != null && localContext.containsKey(value) && defined != null && (!defined.containsKey(value) || defined.get(value) != true))) { // LINE: 404
      new Term(this, localContext, value, localContext.get(value), defined); // LINE: 405
    }
    /*@Nullable*/ Term iriTerm = (/*@Nullable*/ Term) this.terms.get(value); // LINE: 407
    if ((iriTerm != null && KEYWORDS.contains(iriTerm.iri))) { // LINE: 410
      return iriTerm.iri; // LINE: 411
    }
    if ((vocab && iriTerm != null)) { // LINE: 414
      return iriTerm.iri; // LINE: 415
    }
    if ((value.length() > 1 && value.substring(1).contains(":"))) { // LINE: 418
      Integer idx = (Integer) value.indexOf(":"); // LINE: 420
      String prefix = value.substring(0, idx); // LINE: 421
      String suffix = value.substring(idx + 1); // LINE: 422
      if (((prefix == null && ((Object) "_") == null || prefix != null && (prefix).equals("_")) || suffix.startsWith("//"))) { // LINE: 425
        return value; // LINE: 426
      }
      if ((localContext != null && localContext.containsKey(prefix) && defined != null)) { // LINE: 430
        if ((!defined.containsKey(prefix) || defined.get(prefix) != true)) { // LINE: 431
          new Term(this, localContext, prefix, localContext.get(prefix), defined); // LINE: 432
        }
      }
      /*@Nullable*/ Term pfxTerm = (/*@Nullable*/ Term) this.terms.get(prefix); // LINE: 435
      if ((pfxTerm != null && pfxTerm.iri != null && pfxTerm.isPrefix)) { // LINE: 436
        return pfxTerm.iri + suffix; // LINE: 437
      }
      if ((!(value.startsWith("#")) && isIri(value))) { // LINE: 441
        return value; // LINE: 442
      }
    }
    if ((vocab && this.vocabularyMapping != null)) { // LINE: 445
      return this.vocabularyMapping + value; // LINE: 446
    } else if (docRelative) { // LINE: 449
      return resolveIri(this.baseIri, value); // LINE: 450
    }
    return value; // LINE: 453
  }
}
