/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/jsonld/compaction.py
 */
package trld.jsonld;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.Common.warning;
import static trld.jsonld.Base.*;
import trld.jsonld.Context;
import trld.jsonld.Term;
import trld.jsonld.InvalidNestValueError;
import static trld.jsonld.Invcontext.getInverseContext;

public class Compaction {
  public static final String PRESERVE = "@preserve"; // LINE: 8

  public static Object compact(Object context, Object docData) {
    return compact(context, docData, null);
  }
  public static Object compact(Object context, Object docData, /*@Nullable*/ String baseIri) {
    return compact(context, docData, baseIri, true);
  }
  public static Object compact(Object context, Object docData, /*@Nullable*/ String baseIri, Boolean compactArrays) {
    return compact(context, docData, baseIri, compactArrays, false);
  }
  public static Object compact(Object context, Object docData, /*@Nullable*/ String baseIri, Boolean compactArrays, Boolean ordered) { // LINE: 15
    Context activeContext; // LINE: 19
    if (context instanceof Context) { // LINE: 20
      activeContext = (Context) context; // LINE: 21
    } else {
      /*@Nullable*/ String contextUrl = (context instanceof String ? (String) context : null); // LINE: 23
      if (context instanceof Map) { // LINE: 24
        context = ((Map) context).get(CONTEXT); // LINE: 25
      }
      activeContext = (Context) new Context(baseIri).getContext(((Object) context), contextUrl); // LINE: 26
    }
    Object result = compaction(activeContext, null, docData, compactArrays, ordered); // LINE: 28
    if (result instanceof List) { // LINE: 29
      if (((List) result).size() == 0) { // LINE: 30
        result = new HashMap<>(); // LINE: 31
      } else {
        result = Builtins.mapOf(iriCompaction(activeContext, GRAPH), result); // LINE: 33
      }
    }
    return result; // LINE: 34
  }

  public static Object compaction(Context activeContext, /*@Nullable*/ String activeProperty, Object element) {
    return compaction(activeContext, activeProperty, element, false);
  }
  public static Object compaction(Context activeContext, /*@Nullable*/ String activeProperty, Object element, Boolean compactArrays) {
    return compaction(activeContext, activeProperty, element, compactArrays, false);
  }
  public static Object compaction(Context activeContext, /*@Nullable*/ String activeProperty, Object element, Boolean compactArrays, Boolean ordered) { // LINE: 37
    Context typeScopedContext = activeContext; // LINE: 45
    Object result; // LINE: 46
    Map<String, Object> resultMap; // LINE: 47
    List<Object> resultList; // LINE: 48
    /*@Nullable*/ Term activeTerm = (/*@Nullable*/ Term) activeContext.terms.get(activeProperty); // LINE: 50
    List activeContainerMapping = (activeTerm != null ? activeTerm.container : new ArrayList<>()); // LINE: 51
    Object compactedItem; // LINE: 52
    if ((element == null || isScalar(element))) { // LINE: 55
      return element; // LINE: 56
    }
    if (element instanceof List) { // LINE: 59
      result = resultList = new ArrayList<>(); // LINE: 61
      for (Object item : (List) element) { // LINE: 63
        compactedItem = compaction(activeContext, activeProperty, item, compactArrays, ordered); // LINE: 65
        if (compactedItem != null) { // LINE: 68
          ((List) result).add(compactedItem); // LINE: 69
        }
      }
      if ((resultList.size() == 0 || resultList.size() > 1 || !(compactArrays) || new HashSet(new ArrayList<>(Arrays.asList(new String[] {(String) GRAPH, SET}))).contains(activeProperty) || activeContainerMapping.contains(LIST) || activeContainerMapping.contains(SET))) { // LINE: 71
        return resultList; // LINE: 74
      } else {
        return resultList.get(0); // LINE: 77
      }
    }
    assert element instanceof Map;
    if ((!(activeContext.propagate) && activeContext.previousContext != null)) { // LINE: 83
      if (!((Map) element).containsKey(VALUE)) { // LINE: 84
        if ((!((Map) element).containsKey(ID) || ((Map) element).size() != 1)) { // LINE: 85
          activeContext = (Context) activeContext.previousContext; // LINE: 86
        }
      }
    }
    if ((activeTerm != null && activeTerm.hasLocalContext)) { // LINE: 89
      activeContext = (Context) activeTerm.getLocalContext(activeContext); // LINE: 90
    }
    if ((((Map) element).containsKey(VALUE) || ((Map) element).containsKey(ID))) { // LINE: 93
      Object valueResult = valueCompaction(activeContext, activeTerm, (Map) element); // LINE: 94
      if ((isScalar(valueResult) || (activeTerm != null && (activeTerm.typeMapping == null && ((Object) JSON) == null || activeTerm.typeMapping != null && (activeTerm.typeMapping).equals(JSON))))) { // LINE: 95
        return valueResult; // LINE: 96
      }
    }
    if ((element instanceof Map && ((Map) element).containsKey(LIST) && activeContainerMapping.contains(LIST))) { // LINE: 99
      return compaction(activeContext, activeProperty, ((Map) element).get(LIST), compactArrays, ordered); // LINE: 100
    }
    Boolean insideReverse = (Boolean) (activeProperty == null && ((Object) REVERSE) == null || activeProperty != null && (activeProperty).equals(REVERSE)); // LINE: 103
    result = resultMap = new HashMap<>(); // LINE: 106
    List<String> compactedTypes = new ArrayList<>(); // LINE: 110
    Context currentActiveContext = activeContext; // LINE: 111
    if (((Map) element).containsKey(TYPE)) { // LINE: 112
      for (Object expandedType : asList(((Map) element).get(TYPE))) { // LINE: 113
        compactedTypes.add(iriCompaction(typeScopedContext, ((String) expandedType))); // LINE: 114
      }
      for (Object ctype : Builtins.sorted(compactedTypes)) { // LINE: 116
        /*@Nullable*/ Term typeterm = (/*@Nullable*/ Term) typeScopedContext.terms.get(ctype); // LINE: 118
        if ((typeterm != null && typeterm.hasLocalContext)) { // LINE: 119
          activeContext = typeterm.getLocalContext(currentActiveContext, false); // LINE: 120
        }
      }
    }
    for (Map.Entry<String, Object> expandedProperty_expandedValue : ((Map<String, Object>) element).entrySet()) { // LINE: 123
      String expandedProperty = expandedProperty_expandedValue.getKey();
      Object expandedValue = expandedProperty_expandedValue.getValue();
      /*@Nullable*/ String compactedValue = null; // LINE: 124
      String alias = iriCompaction(activeContext, expandedProperty, expandedValue); // LINE: 126
      /*@Nullable*/ Term aliasTerm = (/*@Nullable*/ Term) activeContext.terms.get(alias); // LINE: 127
      List aliasContainerMapping = (aliasTerm != null ? aliasTerm.container : new ArrayList<>()); // LINE: 128
      Boolean asArray; // LINE: 129
      if ((expandedProperty == null && ((Object) ID) == null || expandedProperty != null && (expandedProperty).equals(ID))) { // LINE: 132
        if (expandedValue instanceof String) { // LINE: 134
          compactedValue = shortenIri(activeContext, (String) expandedValue); // LINE: 135
        }
        resultMap.put(alias, ((Object) compactedValue)); // LINE: 139
        continue; // LINE: 140
      } else if ((expandedProperty == null && ((Object) TYPE) == null || expandedProperty != null && (expandedProperty).equals(TYPE))) { // LINE: 143
        asArray = (((activeContext.processingMode == null && ((Object) JSONLD11) == null || activeContext.processingMode != null && (activeContext.processingMode).equals(JSONLD11)) && aliasContainerMapping.contains(SET)) || !(compactArrays)); // LINE: 154
        addValue(resultMap, alias, (compactedTypes.size() == 1 ? compactedTypes.get(0) : compactedTypes), asArray); // LINE: 159
        continue; // LINE: 163
      } else if ((expandedProperty == null && ((Object) REVERSE) == null || expandedProperty != null && (expandedProperty).equals(REVERSE))) { // LINE: 166
        Map<String, Object> compactedMap = ((Map<String, Object>) compaction(activeContext, REVERSE, expandedValue, compactArrays, ordered)); // LINE: 168
        for (String prop : ((List<String>) new ArrayList(compactedMap.keySet()))) { // LINE: 171
          Object value = (Object) compactedMap.get(prop); // LINE: 172
          /*@Nullable*/ Term propTerm = (/*@Nullable*/ Term) activeContext.terms.get(prop); // LINE: 173
          if ((propTerm != null && propTerm.isReverseProperty)) { // LINE: 175
            asArray = (((activeContext.processingMode == null && ((Object) JSONLD11) == null || activeContext.processingMode != null && (activeContext.processingMode).equals(JSONLD11)) && propTerm.container.contains(SET)) || !(compactArrays)); // LINE: 177
            addValue(resultMap, prop, value, asArray); // LINE: 180
            compactedMap.remove(prop); // LINE: 182
          }
        }
        if (compactedMap.size() > 0) { // LINE: 184
          String revAlias = iriCompaction(activeContext, REVERSE); // LINE: 186
          resultMap.put(revAlias, compactedMap); // LINE: 188
        }
        continue; // LINE: 190
      } else if ((expandedProperty == null && ((Object) PRESERVE) == null || expandedProperty != null && (expandedProperty).equals(PRESERVE))) { // LINE: 193
        if (!expandedValue.equals(new ArrayList<>())) { // LINE: 196
          resultMap.put(PRESERVE, compaction(activeContext, activeProperty, expandedValue, compactArrays, ordered)); // LINE: 197
        }
      } else if (((expandedProperty == null && ((Object) INDEX) == null || expandedProperty != null && (expandedProperty).equals(INDEX)) && activeContainerMapping.contains(INDEX))) { // LINE: 201
        continue; // LINE: 202
      } else if (new HashSet(new ArrayList<>(Arrays.asList(new String[] {(String) DIRECTION, INDEX, LANGUAGE, VALUE}))).contains(expandedProperty)) { // LINE: 205
        resultMap.put(alias, expandedValue); // LINE: 208
        continue; // LINE: 209
      }
      String itemActiveProperty; // LINE: 211
      /*@Nullable*/ Term itemActiveTerm; // LINE: 212
      Map<String, Object> nestResult; // LINE: 213
      if ((expandedValue == null && ((Object) new ArrayList<>()) == null || expandedValue != null && (expandedValue).equals(new ArrayList<>()))) { // LINE: 215
        itemActiveProperty = iriCompaction(activeContext, expandedProperty, expandedValue, true, insideReverse); // LINE: 217
        itemActiveTerm = (Term) activeContext.terms.get(itemActiveProperty); // LINE: 218
        nestResult = getNestResult(activeContext, itemActiveTerm, resultMap); // LINE: 220
        addValueAsList(nestResult, itemActiveProperty, new ArrayList<>()); // LINE: 222
      }
      expandedValue = (Object) asList(expandedValue); // LINE: 225
      assert expandedValue instanceof List;
      for (Object expandedItem : (List) expandedValue) { // LINE: 228
        itemActiveProperty = iriCompaction(activeContext, expandedProperty, expandedItem, true, insideReverse); // LINE: 230
        itemActiveTerm = (Term) activeContext.terms.get(itemActiveProperty); // LINE: 231
        nestResult = getNestResult(activeContext, itemActiveTerm, resultMap); // LINE: 233
        List<String> container; // LINE: 235
        if ((itemActiveTerm != null && itemActiveTerm.container != null)) { // LINE: 236
          container = (List<String>) itemActiveTerm.container; // LINE: 237
        } else {
          container = new ArrayList<>(); // LINE: 239
        }
        asArray = ((container.contains(SET) || new HashSet(new ArrayList<>(Arrays.asList(new String[] {(String) GRAPH, LIST}))).contains(itemActiveProperty)) || !(compactArrays)); // LINE: 241
        Object itemToCompact = expandedItem; // LINE: 245
        Boolean itemIsListObject = false; // LINE: 246
        Boolean itemIsGraphObject = false; // LINE: 247
        if (expandedItem instanceof Map) { // LINE: 248
          if (((Map) expandedItem).containsKey(LIST)) { // LINE: 249
            itemToCompact = ((Map) expandedItem).get(LIST); // LINE: 250
            itemIsListObject = true; // LINE: 251
          }
          if (isGraphObject((Map) expandedItem)) { // LINE: 252
            itemToCompact = ((Map) expandedItem).get(GRAPH); // LINE: 253
            itemIsGraphObject = true; // LINE: 254
          }
        }
        compactedItem = compaction(activeContext, itemActiveProperty, itemToCompact, compactArrays, ordered); // LINE: 256
        if (itemIsListObject) { // LINE: 260
          assert expandedItem instanceof Map;
          if (!(compactedItem instanceof List)) { // LINE: 264
            compactedItem = new ArrayList<>(Arrays.asList(new Object[] {(Object) compactedItem})); // LINE: 265
          }
          if (!container.contains(LIST)) { // LINE: 267
            compactedItem = Builtins.mapOf(iriCompaction(activeContext, LIST), compactedItem); // LINE: 269
            assert compactedItem instanceof Map;
            if (((Map) expandedItem).containsKey(INDEX)) { // LINE: 272
              ((Map) compactedItem).put(iriCompaction(activeContext, INDEX), ((Map) expandedItem).get(INDEX)); // LINE: 273
            }
            addValue(nestResult, itemActiveProperty, (Map) compactedItem, asArray); // LINE: 275
            continue; // LINE: 277
          } else if (activeProperty != null) { // LINE: 279
            nestResult.put(activeProperty, (List) compactedItem); // LINE: 280
          }
        }
        Map<String, Object> mapObject; // LINE: 283
        /*@Nullable*/ String mapKey = null; // LINE: 284
        if (itemIsGraphObject) { // LINE: 285
          assert expandedItem instanceof Map;
          if ((container.contains(GRAPH) && container.contains(ID))) { // LINE: 288
            if (!nestResult.containsKey(itemActiveProperty)) nestResult.put(itemActiveProperty, new HashMap<>());
            mapObject = ((Map<String, Object>) nestResult.get(itemActiveProperty)); // LINE: 290
            String idOrNone = (String) (((Map) expandedItem).containsKey(ID) ? ((String) ((Map) expandedItem).get(ID)) : NONE); // LINE: 292
            mapKey = (String) iriCompaction(activeContext, idOrNone, null, !((Map) expandedItem).containsKey(ID)); // LINE: 293
            addValue(mapObject, mapKey, compactedItem, asArray); // LINE: 295
          } else if ((container.contains(GRAPH) && container.contains(INDEX) && isSimpleGraphObject((Map) expandedItem))) { // LINE: 297
            if (!nestResult.containsKey(itemActiveProperty)) nestResult.put(itemActiveProperty, new HashMap<>());
            mapObject = ((Map<String, Object>) nestResult.get(itemActiveProperty)); // LINE: 299
            String indexOrNone = (String) (((Map) expandedItem).containsKey(INDEX) ? ((String) ((Map) expandedItem).get(INDEX)) : NONE); // LINE: 301
            mapKey = iriCompaction(activeContext, indexOrNone); // LINE: 302
            addValue(mapObject, mapKey, compactedItem, asArray); // LINE: 304
          } else if ((container.contains(GRAPH) && isSimpleGraphObject((Map) expandedItem))) { // LINE: 306
            if ((compactedItem instanceof List && ((List) compactedItem).size() > 1)) { // LINE: 308
              compactedItem = Builtins.mapOf(iriCompaction(activeContext, INCLUDED), compactedItem); // LINE: 309
            }
            addValue(nestResult, itemActiveProperty, compactedItem, asArray); // LINE: 311
          } else {
            compactedItem = Builtins.mapOf(iriCompaction(activeContext, GRAPH), compactedItem); // LINE: 315
            assert compactedItem instanceof Map;
            if (((Map) expandedItem).containsKey(ID)) { // LINE: 318
              ((Map) compactedItem).put(iriCompaction(activeContext, ID), shortenIri(activeContext, ((String) ((Map) expandedItem).get(ID)))); // LINE: 319
            }
            if (((Map) expandedItem).containsKey(INDEX)) { // LINE: 321
              ((Map) compactedItem).put(iriCompaction(activeContext, INDEX), iriCompaction(activeContext, ((String) ((Map) expandedItem).get(INDEX)))); // LINE: 322
            }
            addValue(nestResult, itemActiveProperty, (Map) compactedItem, asArray); // LINE: 324
          }
        } else if (((container.contains(LANGUAGE) || container.contains(INDEX) || container.contains(ID) || container.contains(TYPE)) && !container.contains(GRAPH))) { // LINE: 327
          assert expandedItem instanceof Map;
          if (!nestResult.containsKey(itemActiveProperty)) nestResult.put(itemActiveProperty, new HashMap<>());
          mapObject = ((Map<String, Object>) nestResult.get(itemActiveProperty)); // LINE: 333
          String containerKw = (String) ((String) (container.contains(LANGUAGE) ? LANGUAGE : (container.contains(INDEX) ? INDEX : (container.contains(ID) ? ID : (container.contains(TYPE) ? TYPE : null))))); // LINE: 335
          String containerKey = iriCompaction(activeContext, containerKw); // LINE: 339
          String indexKey = ((itemActiveTerm != null && itemActiveTerm.index != null) ? itemActiveTerm.index : INDEX); // LINE: 341
          if ((container.contains(LANGUAGE) && ((Map) expandedItem).containsKey(VALUE))) { // LINE: 343
            if (compactedItem instanceof Map) { // LINE: 345
              compactedItem = ((Map) compactedItem).get(VALUE); // LINE: 346
            }
            mapKey = ((String) ((Map) expandedItem).get(LANGUAGE)); // LINE: 347
          } else if ((container.contains(INDEX) && (indexKey == null && ((Object) INDEX) == null || indexKey != null && (indexKey).equals(INDEX)))) { // LINE: 349
            if ((compactedItem instanceof Map && ((Map) compactedItem).containsKey(VALUE) && ((Map) compactedItem).size() == 1)) { // LINE: 351
              compactedItem = ((Map) compactedItem).get(VALUE); // LINE: 352
            }
            mapKey = ((String) ((Map) expandedItem).get(INDEX)); // LINE: 353
          } else if ((container.contains(INDEX) && !indexKey.equals(INDEX))) { // LINE: 355
            containerKey = iriCompaction(activeContext, indexKey); // LINE: 357
            if ((compactedItem instanceof Map && ((Map) compactedItem).containsKey(containerKey))) { // LINE: 360
              mapKey = (String) getMapKeyAndDepleteContainerKey((Map) compactedItem, containerKey, asArray); // LINE: 361
            }
          } else if (container.contains(ID)) { // LINE: 363
            assert compactedItem instanceof Map;
            mapKey = ((/*@Nullable*/ String) ((Map) compactedItem).remove(containerKey)); // LINE: 365
          } else if (container.contains(TYPE)) { // LINE: 367
            assert compactedItem instanceof Map;
            if (((Map) compactedItem).containsKey(containerKey)) { // LINE: 372
              mapKey = (String) getMapKeyAndDepleteContainerKey((Map) compactedItem, containerKey, asArray); // LINE: 373
            }
            if (((Map) compactedItem).size() == 1) { // LINE: 375
              for (Map.Entry<String, Object> key_idval : ((Map<String, Object>) compactedItem).entrySet()) { // LINE: 376
                String key = key_idval.getKey();
                Object idval = key_idval.getValue();
                if ((activeContext.expandVocabIri(key) == null && ((Object) ID) == null || activeContext.expandVocabIri(key) != null && (activeContext.expandVocabIri(key)).equals(ID))) { // LINE: 377
                  compactedItem = compaction(activeContext, itemActiveProperty, Builtins.mapOf(ID, idval)); // LINE: 378
                }
              }
            }
          }
          if (mapKey == null) { // LINE: 381
            mapKey = iriCompaction(activeContext, NONE); // LINE: 382
          }
          addValue(mapObject, mapKey, compactedItem, asArray); // LINE: 384
        } else {
          addValue(nestResult, itemActiveProperty, compactedItem, asArray); // LINE: 388
        }
      }
    }
    return result; // LINE: 391
  }

  protected static /*@Nullable*/ String getMapKeyAndDepleteContainerKey(Map<String, Object> compactedItem, String containerKey, Boolean asArray) { // LINE: 394
    List<String> containerKeyValues = (List<String>) asList(compactedItem.get(containerKey)); // LINE: 398
    Object keyValue = (Object) containerKeyValues.remove(0); // LINE: 400
    if (!(keyValue instanceof String)) { // LINE: 401
      return null; // LINE: 402
    }
    String mapKey = (String) keyValue; // LINE: 403
    if (compactedItem.get(containerKey) != containerKeyValues) { // LINE: 405
      for (Object remaining : new ArrayList(containerKeyValues)) { // LINE: 406
        addValue(compactedItem, containerKey, remaining); // LINE: 407
      }
    }
    if ((containerKeyValues.size() == 1 && !(asArray))) { // LINE: 409
      compactedItem.put(containerKey, containerKeyValues.get(0)); // LINE: 410
    } else if (containerKeyValues.size() == 0) { // LINE: 411
      compactedItem.remove(containerKey); // LINE: 412
    }
    return mapKey; // LINE: 414
  }

  protected static Map<String, Object> getNestResult(Context activeContext, /*@Nullable*/ Term itemActiveTerm, Map<String, Object> resultMap) { // LINE: 417
    Map<String, Object> nestResult; // LINE: 422
    if ((itemActiveTerm != null && itemActiveTerm.nestValue != null)) { // LINE: 423
      if ((!itemActiveTerm.nestValue.equals(NEST) && !activeContext.expandVocabIri(itemActiveTerm.nestValue).equals(NEST))) { // LINE: 425
        throw new InvalidNestValueError(itemActiveTerm.nestValue); // LINE: 427
      }
      if (!resultMap.containsKey(itemActiveTerm.nestValue)) { // LINE: 429
        resultMap.put(itemActiveTerm.nestValue, new HashMap<>()); // LINE: 430
      }
      return ((Map<String, Object>) resultMap.get(itemActiveTerm.nestValue)); // LINE: 432
    } else {
      return resultMap; // LINE: 435
    }
  }

  public static /*@Nullable*/ String maybeIriCompaction(Context activeContext, /*@Nullable*/ String iri) {
    return maybeIriCompaction(activeContext, iri, null);
  }
  public static /*@Nullable*/ String maybeIriCompaction(Context activeContext, /*@Nullable*/ String iri, /*@Nullable*/ Object value) {
    return maybeIriCompaction(activeContext, iri, value, true);
  }
  public static /*@Nullable*/ String maybeIriCompaction(Context activeContext, /*@Nullable*/ String iri, /*@Nullable*/ Object value, Boolean vocab) {
    return maybeIriCompaction(activeContext, iri, value, vocab, false);
  }
  public static /*@Nullable*/ String maybeIriCompaction(Context activeContext, /*@Nullable*/ String iri, /*@Nullable*/ Object value, Boolean vocab, Boolean reverse) { // LINE: 438
    if (iri == null) { // LINE: 445
      return null; // LINE: 446
    }
    return iriCompaction(activeContext, iri, value, vocab, reverse); // LINE: 447
  }

  public static String shortenIri(Context activeContext, String iri) { // LINE: 452
    return iriCompaction(activeContext, iri, null, false); // LINE: 453
  }

  public static String iriCompaction(Context activeContext, String iri) {
    return iriCompaction(activeContext, iri, null);
  }
  public static String iriCompaction(Context activeContext, String iri, /*@Nullable*/ Object value) {
    return iriCompaction(activeContext, iri, value, true);
  }
  public static String iriCompaction(Context activeContext, String iri, /*@Nullable*/ Object value, Boolean vocab) {
    return iriCompaction(activeContext, iri, value, vocab, false);
  }
  public static String iriCompaction(Context activeContext, String iri, /*@Nullable*/ Object value, Boolean vocab, Boolean reverse) { // LINE: 456
    Map inverseContext = (Map) getInverseContext(activeContext); // LINE: 462
    if ((vocab && inverseContext.containsKey(iri))) { // LINE: 465
      String defaultLanguage = (activeContext.defaultLanguage != null ? activeContext.defaultLanguage : NONE); // LINE: 467
      if (activeContext.defaultBaseDirection != null) { // LINE: 468
        defaultLanguage = defaultLanguage + "_" + activeContext.defaultBaseDirection; // LINE: 470
      }
      if ((value instanceof Map && ((Map) value).containsKey(PRESERVE))) { // LINE: 473
        List values = (List) asList(((Map) value).get(PRESERVE)); // LINE: 474
        value = (Map) values.get(0); // LINE: 475
      }
      List<String> containers = new ArrayList<>(); // LINE: 478
      String typeOrLanguage = LANGUAGE; // LINE: 481
      String typeOrLanguageValue = NULL; // LINE: 482
      if ((value instanceof Map && ((Map) value).containsKey(INDEX) && !((Map) value).containsKey(GRAPH))) { // LINE: 485
        containers.add(INDEX); // LINE: 486
        containers.add(INDEX + SET); // LINE: 487
      }
      if (reverse) { // LINE: 490
        typeOrLanguage = TYPE; // LINE: 491
        typeOrLanguageValue = REVERSE; // LINE: 492
        containers.add(SET); // LINE: 493
      } else if ((value instanceof Map && ((Map) value).containsKey(LIST))) { // LINE: 495
        if (!((Map) value).containsKey(INDEX)) { // LINE: 497
          containers.add(LIST); // LINE: 498
        }
        List<Map<String, Object>> valuelist = (List<Map<String, Object>>) ((List<Map<String, Object>>) ((Map) value).get(LIST)); // LINE: 500
        /*@Nullable*/ String commonType = null; // LINE: 502
        /*@Nullable*/ String commonLanguage = null; // LINE: 503
        if (valuelist.size() == 0) { // LINE: 504
          commonLanguage = defaultLanguage; // LINE: 505
        }
        for (Map<String, Object> item : valuelist) { // LINE: 507
          String itemLanguage = NONE; // LINE: 510
          String itemType = NONE; // LINE: 511
          if ((item instanceof Map && ((Map) item).containsKey(VALUE))) { // LINE: 513
            if (((Map) item).containsKey(DIRECTION)) { // LINE: 515
              itemLanguage = ((String) ((Map) item).getOrDefault(LANGUAGE, "")) + "_" + ((Map) item).get(DIRECTION); // LINE: 516
            } else if (((Map) item).containsKey(LANGUAGE)) { // LINE: 518
              itemLanguage = ((String) ((Map) item).get(LANGUAGE)); // LINE: 519
            } else if (((Map) item).containsKey(TYPE)) { // LINE: 521
              itemType = ((String) ((Map) item).get(TYPE)); // LINE: 522
            } else {
              itemLanguage = NULL; // LINE: 525
            }
          } else {
            itemType = ID; // LINE: 528
          }
          if (commonLanguage == null) { // LINE: 530
            commonLanguage = itemLanguage; // LINE: 531
          } else if ((!itemLanguage.equals(commonLanguage) && item instanceof Map && ((Map) item).containsKey(VALUE))) { // LINE: 533
            commonLanguage = NONE; // LINE: 534
          }
          if (commonType == null) { // LINE: 536
            commonType = itemType; // LINE: 537
          } else if (!itemType.equals(commonType)) { // LINE: 539
            commonType = NONE; // LINE: 540
          }
          if (((commonLanguage == null && ((Object) NONE) == null || commonLanguage != null && (commonLanguage).equals(NONE)) && (commonType == null && ((Object) NONE) == null || commonType != null && (commonType).equals(NONE)))) { // LINE: 542
            break; // LINE: 543
          }
        }
        if (commonLanguage == null) { // LINE: 545
          commonLanguage = NONE; // LINE: 546
        }
        if (commonType == null) { // LINE: 548
          commonType = NONE; // LINE: 549
        }
        if (!commonType.equals(NONE)) { // LINE: 551
          typeOrLanguage = TYPE; // LINE: 552
          typeOrLanguageValue = commonType; // LINE: 553
        } else {
          typeOrLanguageValue = commonLanguage; // LINE: 556
        }
      } else if ((value instanceof Map && ((Map) value).containsKey(GRAPH))) { // LINE: 558
        if (((Map) value).containsKey(INDEX)) { // LINE: 560
          containers.add(GRAPH + INDEX); // LINE: 561
          containers.add(GRAPH + INDEX + SET); // LINE: 562
        }
        if (((Map) value).containsKey(ID)) { // LINE: 564
          containers.add(GRAPH + ID); // LINE: 565
          containers.add(GRAPH + ID + SET); // LINE: 566
        }
        containers.add(GRAPH); // LINE: 568
        containers.add(GRAPH + SET); // LINE: 569
        containers.add(SET); // LINE: 570
        if (!((Map) value).containsKey(INDEX)) { // LINE: 572
          containers.add(GRAPH + INDEX); // LINE: 573
          containers.add(GRAPH + INDEX + SET); // LINE: 574
        }
        if (!((Map) value).containsKey(ID)) { // LINE: 576
          containers.add(GRAPH + ID); // LINE: 577
          containers.add(GRAPH + ID + SET); // LINE: 578
        }
        containers.add(INDEX); // LINE: 580
        containers.add(INDEX + SET); // LINE: 581
        typeOrLanguage = TYPE; // LINE: 583
        typeOrLanguageValue = ID; // LINE: 584
      } else {
        if ((value instanceof Map && ((Map) value).containsKey(VALUE))) { // LINE: 588
          if ((((Map) value).containsKey(DIRECTION) && !((Map) value).containsKey(INDEX))) { // LINE: 590
            typeOrLanguageValue = ((String) ((Map) value).getOrDefault(LANGUAGE, "")) + "_" + ((Map) value).get(DIRECTION); // LINE: 591
            containers.add(LANGUAGE); // LINE: 592
            containers.add(LANGUAGE + SET); // LINE: 593
          } else if ((((Map) value).containsKey(LANGUAGE) && !((Map) value).containsKey(INDEX))) { // LINE: 595
            typeOrLanguageValue = ((String) ((Map) value).get(LANGUAGE)); // LINE: 596
            containers.add(LANGUAGE); // LINE: 597
            containers.add(LANGUAGE + SET); // LINE: 598
          } else if (((Map) value).containsKey(TYPE)) { // LINE: 600
            typeOrLanguageValue = ((String) ((Map) value).get(TYPE)); // LINE: 601
            typeOrLanguage = TYPE; // LINE: 602
          }
        } else {
          typeOrLanguage = TYPE; // LINE: 605
          typeOrLanguageValue = ID; // LINE: 606
          containers.add(ID); // LINE: 607
          containers.add(ID + SET); // LINE: 608
          containers.add(TYPE); // LINE: 609
          containers.add(SET + TYPE); // LINE: 610
        }
        containers.add(SET); // LINE: 612
      }
      containers.add(NONE); // LINE: 615
      if (!activeContext.processingMode.equals(JSONLD10)) { // LINE: 617
        if ((!(value instanceof Map) || !((Map) value).containsKey(INDEX))) { // LINE: 618
          containers.add(INDEX); // LINE: 619
          containers.add(INDEX + SET); // LINE: 620
        }
      }
      if (!activeContext.processingMode.equals(JSONLD10)) { // LINE: 622
        if ((value instanceof Map && ((Map) value).size() == 1 && ((Map) value).containsKey(VALUE))) { // LINE: 623
          containers.add(LANGUAGE); // LINE: 624
          containers.add(LANGUAGE + SET); // LINE: 625
        }
      }
      if (typeOrLanguageValue == null) { // LINE: 627
        typeOrLanguageValue = NULL; // LINE: 628
      }
      List<String> preferredValues = new ArrayList<>(); // LINE: 630
      if ((typeOrLanguageValue == null && ((Object) REVERSE) == null || typeOrLanguageValue != null && (typeOrLanguageValue).equals(REVERSE))) { // LINE: 632
        preferredValues.add(REVERSE); // LINE: 633
      }
      if ((new HashSet(new ArrayList<>(Arrays.asList(new String[] {(String) ID, REVERSE}))).contains(typeOrLanguageValue) && value instanceof Map && ((Map) value).containsKey(ID))) { // LINE: 635
        String compactId = (String) iriCompaction(activeContext, ((String) ((Map) value).get(ID))); // LINE: 637
        /*@Nullable*/ Term idTerm = (/*@Nullable*/ Term) activeContext.terms.get(compactId); // LINE: 638
        if ((idTerm != null && (idTerm.iri == null && ((Object) ((Map) value).get(ID)) == null || idTerm.iri != null && (idTerm.iri).equals(((Map) value).get(ID))))) { // LINE: 639
          preferredValues.add(VOCAB); // LINE: 640
          preferredValues.add(ID); // LINE: 641
          preferredValues.add(NONE); // LINE: 642
        } else {
          preferredValues.add(ID); // LINE: 645
          preferredValues.add(VOCAB); // LINE: 646
          preferredValues.add(NONE); // LINE: 647
        }
      } else {
        preferredValues.add(typeOrLanguageValue); // LINE: 650
        preferredValues.add(NONE); // LINE: 651
        if ((value instanceof Map && ((Map) value).containsKey(LIST))) { // LINE: 652
          List listvalue = (List) ((List) ((Map) value).get(LIST)); // LINE: 653
          if (listvalue.size() == 0) { // LINE: 654
            typeOrLanguage = ANY; // LINE: 655
          }
        }
      }
      preferredValues.add(ANY); // LINE: 657
      for (String pv : ((List<String>) new ArrayList(preferredValues))) { // LINE: 659
        Integer idx = (Integer) pv.indexOf("_"); // LINE: 660
        if (idx > -1) { // LINE: 661
          preferredValues.add(pv.substring(idx)); // LINE: 662
        }
      }
      /*@Nullable*/ String termKey = termSelection(activeContext, iri, containers, typeOrLanguage, preferredValues); // LINE: 664
      if (termKey != null) { // LINE: 666
        return termKey; // LINE: 667
      }
    }
    if ((vocab && activeContext.vocabularyMapping != null)) { // LINE: 670
      if (iri.startsWith(activeContext.vocabularyMapping)) { // LINE: 672
        String suffix = (String) iri.substring(activeContext.vocabularyMapping.length()); // LINE: 673
        if ((suffix.length() > 0 && !activeContext.terms.containsKey(suffix))) { // LINE: 674
          return suffix; // LINE: 675
        }
      }
    }
    /*@Nullable*/ String compactIri = null; // LINE: 678
    for (Map.Entry<String, Term> key_termDfn : activeContext.terms.entrySet()) { // LINE: 681
      String key = key_termDfn.getKey();
      Term termDfn = key_termDfn.getValue();
      if ((termDfn.iri == null || (termDfn.iri == null && ((Object) iri) == null || termDfn.iri != null && (termDfn.iri).equals(iri)) || !(iri.startsWith(termDfn.iri)) || !(termDfn.isPrefix))) { // LINE: 683
        continue; // LINE: 684
      }
      String candidate = key + ":" + iri.substring(termDfn.iri.length()); // LINE: 686
      if ((compactIri == null || (candidate.length() <= compactIri.length() && candidate.compareTo(compactIri) < 0))) { // LINE: 688
        if ((!activeContext.terms.containsKey(candidate) || ((activeContext.terms.get(candidate).iri == null && ((Object) iri) == null || activeContext.terms.get(candidate).iri != null && (activeContext.terms.get(candidate).iri).equals(iri)) && value == null))) { // LINE: 689
          compactIri = candidate; // LINE: 690
        }
      }
    }
    if (compactIri != null) { // LINE: 693
      return compactIri; // LINE: 694
    }
    Integer colonx = (Integer) iri.indexOf(":"); // LINE: 697
    if ((colonx > -1 && !iri.contains("//"))) { // LINE: 698
      /*@Nullable*/ Term term = activeContext.terms.get(iri.substring(0, colonx)); // LINE: 699
      if ((term != null && term.isPrefix)) { // LINE: 700
        throw new IRIConfusedWithPrefixError(iri.toString()); // LINE: 701
      }
    }
    if (!(vocab)) { // LINE: 704
      iri = relativiseIri(activeContext.baseIri, iri); // LINE: 705
    }
    return iri; // LINE: 708
  }

  public static /*@Nullable*/ String termSelection(Context activeContext, String keywordOrIri, List<String> containers, String typeOrLanguage, List<String> preferredValues) { // LINE: 711
    Map inverseContext = (Map) getInverseContext(activeContext); // LINE: 718
    Map<String, Object> containerMap = ((Map<String, Object>) inverseContext.get(keywordOrIri)); // LINE: 720
    for (String container : containers) { // LINE: 722
      if (!containerMap.containsKey(container)) { // LINE: 724
        continue; // LINE: 725
      }
      Map<String, Object> typelanguageMap = ((Map<String, Object>) containerMap.get(container)); // LINE: 727
      Map<String, String> valueMap = ((Map<String, String>) typelanguageMap.get(typeOrLanguage)); // LINE: 729
      for (String item : preferredValues) { // LINE: 731
        if (!valueMap.containsKey(item)) { // LINE: 733
          continue; // LINE: 734
        }
        return valueMap.get(item); // LINE: 736
      }
    }
    return null; // LINE: 738
  }

  public static Object valueCompaction(Context activeContext, /*@Nullable*/ Term activeTerm, Map<String, Object> value) { // LINE: 741
    Object result = new HashMap(value); // LINE: 747
    Map inverseContext = (Map) getInverseContext(activeContext); // LINE: 750
    /*@Nullable*/ String language = (/*@Nullable*/ String) activeContext.defaultLanguage; // LINE: 752
    if ((activeTerm != null && activeTerm.language != null)) { // LINE: 753
      language = (String) activeTerm.language; // LINE: 754
    }
    /*@Nullable*/ String direction = (/*@Nullable*/ String) activeContext.defaultBaseDirection; // LINE: 756
    if ((activeTerm != null && activeTerm.direction != null)) { // LINE: 757
      direction = (String) activeTerm.direction; // LINE: 758
    }
    if (((value.containsKey(ID) && value.size() == 1) || (value.size() == 2 && value.containsKey(INDEX)))) { // LINE: 760
      if ((activeTerm != null && (activeTerm.typeMapping == null && ((Object) ID) == null || activeTerm.typeMapping != null && (activeTerm.typeMapping).equals(ID)))) { // LINE: 762
        result = (Object) shortenIri(activeContext, ((String) value.get(ID))); // LINE: 763
      } else if ((activeTerm != null && (activeTerm.typeMapping == null && ((Object) VOCAB) == null || activeTerm.typeMapping != null && (activeTerm.typeMapping).equals(VOCAB)))) { // LINE: 765
        result = (Object) iriCompaction(activeContext, ((String) value.get(ID))); // LINE: 766
      }
    } else if ((activeTerm != null && value.containsKey(TYPE) && (value.get(TYPE) == null && ((Object) activeTerm.typeMapping) == null || value.get(TYPE) != null && (value.get(TYPE)).equals(activeTerm.typeMapping)))) { // LINE: 768
      result = (Object) value.get(VALUE); // LINE: 769
    } else if (((activeTerm != null && (activeTerm.typeMapping == null && ((Object) NONE) == null || activeTerm.typeMapping != null && (activeTerm.typeMapping).equals(NONE))) || (value.containsKey(TYPE) && (activeTerm == null || !value.get(TYPE).equals(activeTerm.typeMapping))))) { // LINE: 771
      if ((result instanceof Map && ((Map) result).containsKey(TYPE))) { // LINE: 773
        Object rtype = (Object) ((Map) result).get(TYPE); // LINE: 775
        if (rtype instanceof List) { // LINE: 776
          List<String> ctypes = new ArrayList<>(); // LINE: 777
          for (Object t : (List) rtype) { // LINE: 778
            ctypes.add(iriCompaction(activeContext, ((String) t))); // LINE: 779
          }
          ((Map) result).put(TYPE, ctypes); // LINE: 780
        } else {
          ((Map) result).put(TYPE, iriCompaction(activeContext, ((String) rtype))); // LINE: 782
        }
      }
    } else if ((value.containsKey(VALUE) && !(value.get(VALUE) instanceof String))) { // LINE: 784
      if (((value.containsKey(INDEX) && activeTerm != null && activeTerm.container.contains(INDEX)) || !value.containsKey(INDEX))) { // LINE: 786
        result = (Object) value.get(VALUE); // LINE: 787
      }
    } else if ((value.containsKey(VALUE) && ((value.containsKey(LANGUAGE) && (value.get(LANGUAGE) == null && ((Object) language) == null || value.get(LANGUAGE) != null && (value.get(LANGUAGE)).equals(language))) || (NULLS.contains(language) && !value.containsKey(LANGUAGE))))) { // LINE: 789
      if ((!value.containsKey(DIRECTION) || (direction != null && (value.get(DIRECTION) == null && ((Object) direction) == null || value.get(DIRECTION) != null && (value.get(DIRECTION)).equals(direction))))) { // LINE: 790
        if ((!value.containsKey(INDEX) || (activeTerm != null && activeTerm.container.contains(INDEX)))) { // LINE: 792
          result = (Object) value.get(VALUE); // LINE: 793
        }
      }
    }
    if (result instanceof Map) { // LINE: 795
      Map compacted = new HashMap<>(); // LINE: 796
      for (Map.Entry<String, Object> k_v : ((Map<String, Object>) result).entrySet()) { // LINE: 797
        String k = k_v.getKey();
        Object v = k_v.getValue();
        compacted.put(iriCompaction(activeContext, k, v), v); // LINE: 798
      }
      result = compacted; // LINE: 799
    }
    return result; // LINE: 801
  }
}
