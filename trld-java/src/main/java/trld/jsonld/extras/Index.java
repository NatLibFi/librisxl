/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/jsonld/extras/index.py
 */
package trld.jsonld.extras;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.REVERSE;
import static trld.jsonld.Base.asList;

public class Index {

  public static Map<String, Map<String, Object>> makeIndex(List<Map<String, Object>> graph) {
    return makeIndex(graph, true);
  }
  public static Map<String, Map<String, Object>> makeIndex(List<Map<String, Object>> graph, Boolean addReverses) { // LINE: 5
    Map<String, Map<String, Object>> index = new HashMap<>(); // LINE: 6
    for (Map<String, Object> item : graph) { // LINE: 8
      /*@Nullable*/ String id = ((/*@Nullable*/ String) item.get(ID)); // LINE: 9
      if (id instanceof String) { // LINE: 10
        index.put((String) id, item); // LINE: 11
      }
    }
    if (addReverses) { // LINE: 13
      indexReverses(index); // LINE: 14
    }
    return index; // LINE: 16
  }

  protected static void indexReverses(Map<String, Map<String, Object>> index) { // LINE: 19
    for (Map<String, Object> item : index.values()) { // LINE: 20
      if (!item.containsKey(ID)) { // LINE: 21
        continue; // LINE: 22
      }
      for (String link : item.keySet()) { // LINE: 23
        List refs = (List) asList(item.get(link)); // LINE: 24
        for (Object ref : refs) { // LINE: 25
          if (!(ref instanceof Map)) { // LINE: 26
            continue; // LINE: 27
          }
          Object linked = (Object) index.get(((String) ((Map) ref).get(ID))); // LINE: 28
          if (!(linked instanceof Map)) { // LINE: 29
            continue; // LINE: 30
          }
          if (!((Map) linked).containsKey(REVERSE)) ((Map) linked).put(REVERSE, new HashMap<>());
          Map revmap = (Map) ((Map) linked).get(REVERSE); // LINE: 31
          if (!revmap.containsKey(link)) revmap.put(link, new ArrayList<>());
          List<Map> revs = (List<Map>) revmap.get(link); // LINE: 32
          if (!(revs.stream().anyMatch(rev -> (rev.get(ID) == null && ((Object) item.get(ID)) == null || rev.get(ID) != null && (rev.get(ID)).equals(item.get(ID)))))) { // LINE: 33
            revs.add(Builtins.mapOf(ID, item.get(ID))); // LINE: 34
          }
        }
      }
    }
  }
}
