/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadNode extends ReadCompound { // LINE: 562
  ReadNode(/*@Nullable*/ ParserState parent) { super(parent); };
  public /*@Nullable*/ Map node; // LINE: 564
  public /*@Nullable*/ String p; // LINE: 565
  public Boolean acceptValue; // LINE: 566

  public void fillNode(Object value) { // LINE: 568
    if (this.p == null) { // LINE: 569
      if ((value == null && ((Object) TYPE) == null || value != null && (value).equals(TYPE))) { // LINE: 570
        this.p = TYPE; // LINE: 571
      } else {
        if (!(value instanceof Map)) { // LINE: 573
          throw new NotationError("Unexpected predicate: " + value); // LINE: 574
        }
        this.p = (String) this.symbol((Map) value); // LINE: 575
      }
    } else if (this.acceptValue) { // LINE: 576
      if ((this.p == null && ((Object) TYPE) == null || this.p != null && (this.p).equals(TYPE))) { // LINE: 577
        assert value instanceof Map;
        value = ((String) this.symbol((Map) value)); // LINE: 579
      }
      value = (Object) this.compactValue(value); // LINE: 581
      /*@Nullable*/ Object given = (/*@Nullable*/ Object) this.node.get(this.p); // LINE: 583
      if (given != null) { // LINE: 584
        List values = (given instanceof List ? (List) given : new ArrayList<>(Arrays.asList(new Object[] {(Object) given}))); // LINE: 585
        values.add(value); // LINE: 586
        this.node.put(this.p, values); // LINE: 587
      } else {
        this.node.put(this.p, value); // LINE: 589
      }
      this.acceptValue = false; // LINE: 590
    } else {
      throw new NotationError("Unexpected: " + value); // LINE: 592
    }
  }

  public Map.Entry<ParserState, Object> consumeNodeChar(String c) { // LINE: 594
    Map.Entry<ParserState, Object> readspace = (Map.Entry<ParserState, Object>) this.readSpace(c); // LINE: 595
    if (readspace != null) { // LINE: 596
      return readspace; // LINE: 597
    }
    if ((c == null && ((Object) "[") == null || c != null && (c).equals("["))) { // LINE: 598
      return new KeyValue(new ReadBNode(this), null); // LINE: 599
    } else if ((c == null && ((Object) "(") == null || c != null && (c).equals("("))) { // LINE: 600
      return new KeyValue(new ReadCollection(this), null); // LINE: 601
    } else if ((c == null && ((Object) ";") == null || c != null && (c).equals(";"))) { // LINE: 602
      this.p = null; // LINE: 603
      this.acceptValue = true; // LINE: 604
      return new KeyValue(this, null); // LINE: 605
    } else if ((c == null && ((Object) ",") == null || c != null && (c).equals(","))) { // LINE: 606
      this.acceptValue = true; // LINE: 607
      return new KeyValue(this, null); // LINE: 608
    } else if (LITERAL_QUOTE_CHARS.contains(c)) { // LINE: 609
      return new KeyValue(new ReadLiteral(this, c), null); // LINE: 610
    } else {
      return new ReadSymbol(this).consume(c, null); // LINE: 612
    }
  }
}
