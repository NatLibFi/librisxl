/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadNode extends ReadCompound { // LINE: 564
  ReadNode(/*@Nullable*/ ParserState parent) { super(parent); };
  public /*@Nullable*/ Map node; // LINE: 566
  public /*@Nullable*/ String p; // LINE: 567
  public /*@Nullable*/ Object lastValue; // LINE: 568
  public Boolean openBrace = false; // LINE: 569

  public void fillNode(Object value) { // LINE: 571
    if (this.p == null) { // LINE: 572
      if ((value == null && ((Object) TYPE) == null || value != null && (value).equals(TYPE))) { // LINE: 573
        this.p = TYPE; // LINE: 574
      } else {
        if (!(value instanceof Map)) { // LINE: 576
          throw new NotationError("Unexpected predicate: " + value); // LINE: 577
        }
        this.p = (String) this.symbol((Map) value); // LINE: 578
      }
    } else if (this.lastValue == null) { // LINE: 579
      if ((this.p == null && ((Object) TYPE) == null || this.p != null && (this.p).equals(TYPE))) { // LINE: 580
        assert value instanceof Map;
        value = ((String) this.symbol((Map) value)); // LINE: 582
      }
      value = (Object) this.compactValue(value); // LINE: 584
      /*@Nullable*/ Object given = (/*@Nullable*/ Object) this.node.get(this.p); // LINE: 586
      if (given != null) { // LINE: 587
        List values = (given instanceof List ? (List) given : new ArrayList<>(Arrays.asList(new Object[] {(Object) given}))); // LINE: 588
        values.add(value); // LINE: 589
        this.node.put(this.p, values); // LINE: 590
      } else {
        this.node.put(this.p, value); // LINE: 592
      }
      this.lastValue = value; // LINE: 593
    } else if ((value instanceof Map && ((Map) value).containsKey(ANNOTATION))) { // LINE: 594
      Object lastValue = (Object) this.lastValue; // LINE: 595
      if ((this.p == null && ((Object) TYPE) == null || this.p != null && (this.p).equals(TYPE))) { // LINE: 596
        lastValue = Builtins.mapOf(TYPE, lastValue); // LINE: 597
      } else if (!(lastValue instanceof Map)) { // LINE: 598
        lastValue = Builtins.mapOf(VALUE, lastValue); // LINE: 599
      }
      ((Map) lastValue).put(ANNOTATION, ((Map) value).get(ANNOTATION)); // LINE: 600
      if (this.node.get(this.p) instanceof List) { // LINE: 601
        List l = (List) this.node.get(this.p); // LINE: 602
        l.set(l.size() - 1, (Map) lastValue); // LINE: 603
      } else {
        this.node.put(this.p, (Map) lastValue); // LINE: 605
      }
    } else {
      throw new NotationError("Unexpected: " + value); // LINE: 607
    }
  }

  public Map.Entry<ParserState, Object> consumeNodeChar(String c) { // LINE: 609
    Map.Entry<ParserState, Object> readspace = (Map.Entry<ParserState, Object>) this.readSpace(c); // LINE: 610
    if (readspace != null) { // LINE: 611
      return readspace; // LINE: 612
    }
    if ((c == null && ((Object) "{") == null || c != null && (c).equals("{"))) { // LINE: 614
      this.openBrace = true; // LINE: 615
      return new KeyValue(this, null); // LINE: 616
    } else if ((c == null && ((Object) "|") == null || c != null && (c).equals("|"))) { // LINE: 617
      assert this.openBrace;
      this.openBrace = false; // LINE: 619
      return new KeyValue(new ReadAnnotation(this), null); // LINE: 620
    } else if ((c == null && ((Object) "[") == null || c != null && (c).equals("["))) { // LINE: 621
      return new KeyValue(new ReadBNode(this), null); // LINE: 622
    } else if ((c == null && ((Object) "(") == null || c != null && (c).equals("("))) { // LINE: 623
      return new KeyValue(new ReadCollection(this), null); // LINE: 624
    } else if ((c == null && ((Object) ";") == null || c != null && (c).equals(";"))) { // LINE: 625
      this.p = null; // LINE: 626
      this.lastValue = null; // LINE: 627
      return new KeyValue(this, null); // LINE: 628
    } else if ((c == null && ((Object) ",") == null || c != null && (c).equals(","))) { // LINE: 629
      this.lastValue = null; // LINE: 630
      return new KeyValue(this, null); // LINE: 631
    } else if (LITERAL_QUOTE_CHARS.contains(c)) { // LINE: 632
      return new KeyValue(new ReadLiteral(this, c), null); // LINE: 633
    } else {
      return new ReadSymbol(this).consume(c, null); // LINE: 635
    }
  }
}
