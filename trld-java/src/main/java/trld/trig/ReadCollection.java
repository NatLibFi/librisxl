/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadCollection extends ReadCompound { // LINE: 681
  ReadCollection(/*@Nullable*/ ParserState parent) { super(parent); };
  public List<Object> nodes; // LINE: 683

  public void init() { // LINE: 685
    this.reset(); // LINE: 686
  }

  public void reset() { // LINE: 688
    this.nodes = new ArrayList<>(); // LINE: 689
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) { // LINE: 691
    if (prevValue != null) { // LINE: 692
      this.nodes.add(this.compactValue(prevValue)); // LINE: 693
    }
    Map.Entry<ParserState, Object> readspace = (Map.Entry<ParserState, Object>) this.readSpace(c); // LINE: 695
    if (readspace != null) { // LINE: 696
      return readspace; // LINE: 697
    } else if ((c == null && ((Object) EOF) == null || c != null && (c).equals(EOF))) { // LINE: 698
      throw new NotationError("Unexpected EOF in collection."); // LINE: 699
    } else if ((c == null && ((Object) "[") == null || c != null && (c).equals("["))) { // LINE: 700
      return new KeyValue(new ReadBNode(this), null); // LINE: 701
    } else if ((c == null && ((Object) "(") == null || c != null && (c).equals("("))) { // LINE: 702
      return new KeyValue(new ReadCollection(this), null); // LINE: 703
    } else if ((c == null && ((Object) ")") == null || c != null && (c).equals(")"))) { // LINE: 704
      return new KeyValue(this.parent, Builtins.mapOf(LIST, this.nodes)); // LINE: 705
    } else if (LITERAL_QUOTE_CHARS.contains(c)) { // LINE: 706
      return new KeyValue(new ReadLiteral(this, c), null); // LINE: 707
    } else {
      return new ReadSymbol(this).consume(c, null); // LINE: 709
    }
  }
}
