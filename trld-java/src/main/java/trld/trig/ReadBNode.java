/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadBNode extends ReadNode { // LINE: 638
  ReadBNode(/*@Nullable*/ ParserState parent) { super(parent); };

  public void init() { // LINE: 640
    this.reset(); // LINE: 641
  }

  public void reset() { // LINE: 643
    this.node = new HashMap<>(); // LINE: 644
    this.p = null; // LINE: 645
    this.lastValue = null; // LINE: 646
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) { // LINE: 648
    if (prevValue != null) { // LINE: 649
      this.fillNode(prevValue); // LINE: 650
    }
    if ((c == null && ((Object) EOF) == null || c != null && (c).equals(EOF))) { // LINE: 652
      throw new NotationError("Unexpected " + c + " in bnode."); // LINE: 653
    } else if ((c == null && ((Object) "]") == null || c != null && (c).equals("]"))) { // LINE: 654
      return new KeyValue(this.parent, this.node); // LINE: 655
    } else {
      return this.consumeNodeChar(c); // LINE: 657
    }
  }
}
