/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadAnnotation extends ReadBNode { // LINE: 660
  ReadAnnotation(/*@Nullable*/ ParserState parent) { super(parent); };
  public Boolean endStarted = false; // LINE: 662

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) { // LINE: 664
    if (prevValue != null) { // LINE: 665
      this.fillNode(prevValue); // LINE: 666
    }
    if ((c == null && ((Object) EOF) == null || c != null && (c).equals(EOF))) { // LINE: 668
      throw new NotationError("Unexpected " + c + " in annotation."); // LINE: 669
    } else if ((!(this.openBrace) && (c == null && ((Object) "|") == null || c != null && (c).equals("|")))) { // LINE: 670
      this.endStarted = true; // LINE: 671
      return new KeyValue(this, null); // LINE: 672
    } else if ((c == null && ((Object) "}") == null || c != null && (c).equals("}"))) { // LINE: 673
      assert this.endStarted;
      this.endStarted = false; // LINE: 675
      return new KeyValue(this.parent, Builtins.mapOf(ANNOTATION, this.node)); // LINE: 676
    } else {
      return this.consumeNodeChar(c); // LINE: 678
    }
  }
}
