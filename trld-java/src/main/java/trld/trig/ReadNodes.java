/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadNodes extends ReadNode { // LINE: 668
  ReadNodes(/*@Nullable*/ ParserState parent) { super(parent); };
  public List<Map> nodes; // LINE: 670
  public Boolean expectGraph; // LINE: 671

  public void init() { // LINE: 673
    this.nodes = new ArrayList<>(); // LINE: 674
    this.reset(); // LINE: 675
  }

  public void reset() { // LINE: 677
    this.node = null; // LINE: 678
    this.p = null; // LINE: 679
    this.acceptValue = true; // LINE: 680
    this.expectGraph = false; // LINE: 681
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) { // LINE: 683
    if (prevValue != null) { // LINE: 684
      if (prevValue instanceof String) { // LINE: 685
        Boolean finalDot = false; // LINE: 686
        if (AT_KEYWORDS.contains(prevValue)) { // LINE: 687
          prevValue = ((String) prevValue).substring(1); // LINE: 688
          finalDot = true; // LINE: 689
        }
        if ((prevValue == null && ((Object) RQ_PREFIX) == null || prevValue != null && (prevValue).equals(RQ_PREFIX))) { // LINE: 690
          return new ReadPrefix(this, finalDot).consume(c, null); // LINE: 691
        } else if ((prevValue == null && ((Object) RQ_BASE) == null || prevValue != null && (prevValue).equals(RQ_BASE))) { // LINE: 692
          return new ReadBase(this, finalDot).consume(c, null); // LINE: 693
        } else if ((prevValue == null && ((Object) RQ_GRAPH) == null || prevValue != null && (prevValue).equals(RQ_GRAPH))) { // LINE: 694
          this.expectGraph = true; // LINE: 695
          return new KeyValue(this, null); // LINE: 696
        }
      }
      if (this.node == null) { // LINE: 698
        assert prevValue instanceof Map;
        this.node = (Map) this.nodeWithId((Map) prevValue); // LINE: 700
      } else {
        if ((this.p == null && this.expectGraph && this.node != null)) { // LINE: 702
          throw new NotationError("Expected graph notation to follow, got " + prevValue); // LINE: 703
        }
        this.fillNode(prevValue); // LINE: 705
      }
    }
    if ((c == null && ((Object) EOF) == null || c != null && (c).equals(EOF))) { // LINE: 707
      Map<String, Object> result = Builtins.mapOf(CONTEXT, this.context, GRAPH, this.nodes); // LINE: 708
      return new KeyValue(this.parent, result); // LINE: 709
    } else if (((c == null && ((Object) ".") == null || c != null && (c).equals(".")) && (this.p == null || !(this.acceptValue)))) { // LINE: 710
      this.nextNode(); // LINE: 711
      return new KeyValue(this, null); // LINE: 712
    } else if ((c == null && ((Object) "{") == null || c != null && (c).equals("{"))) { // LINE: 713
      this.expectGraph = false; // LINE: 714
      return new KeyValue(new ReadGraph(this), null); // LINE: 715
    } else {
      return this.consumeNodeChar(c); // LINE: 717
    }
  }

  public void nextNode() { // LINE: 719
    if ((this.node == null || (this.p == null && (!this.node.containsKey(GRAPH) && (this.node.containsKey(ID) && this.node.size() == 1))))) { // LINE: 720
      throw new NotationError("Incomplete triple for node: " + this.node); // LINE: 723
    }
    this.nodes.add(this.node); // LINE: 724
    this.reset(); // LINE: 725
  }
}
