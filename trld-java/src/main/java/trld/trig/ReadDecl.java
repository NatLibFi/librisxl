/**
 * This file was automatically generated by the TRLD transpiler.
 * Source: trld/trig/parser.py
 */
package trld.trig;

//import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.io.*;

import trld.Builtins;
import trld.KeyValue;

import trld.Input;
import static trld.Common.dumpJson;
import static trld.jsonld.Base.VALUE;
import static trld.jsonld.Base.TYPE;
import static trld.jsonld.Base.LANGUAGE;
import static trld.jsonld.Base.ID;
import static trld.jsonld.Base.LIST;
import static trld.jsonld.Base.GRAPH;
import static trld.jsonld.Base.CONTEXT;
import static trld.jsonld.Base.VOCAB;
import static trld.jsonld.Base.BASE;
import static trld.jsonld.Base.PREFIX;
import static trld.jsonld.Base.PREFIX_DELIMS;
import static trld.Rdfterms.RDF_TYPE;
import static trld.Rdfterms.XSD;
import static trld.Rdfterms.XSD_DOUBLE;
import static trld.Rdfterms.XSD_INTEGER;
import static trld.trig.Parser.*;


public class ReadDecl extends ReadCompound { // LINE: 478
  public Boolean finalDot; // LINE: 480
  public Boolean completed; // LINE: 481

  public ReadDecl(ReadNodes parent, Boolean finalDot) { // LINE: 483
    super(parent); // LINE: 484
    this.finalDot = finalDot; // LINE: 485
    this.completed = false; // LINE: 486
  }

  public Map.Entry<ParserState, Object> consume(String c, Object prevValue) { // LINE: 488
    if (prevValue instanceof Map) { // LINE: 489
      if (!(this.moreParts((Map) prevValue))) { // LINE: 490
        this.completed = true; // LINE: 491
        if (!(this.finalDot)) { // LINE: 492
          this.declare(); // LINE: 493
          return this.parent.consume(c, null); // LINE: 494
        }
      }
    }
    Map.Entry<ParserState, Object> readspace = (Map.Entry<ParserState, Object>) this.readSpace(c); // LINE: 496
    if (readspace != null) { // LINE: 497
      return readspace; // LINE: 498
    }
    if ((c == null && ((Object) ".") == null || c != null && (c).equals("."))) { // LINE: 500
      this.declare(); // LINE: 501
      return new KeyValue(this.parent, null); // LINE: 502
    } else if ((this.completed && this.finalDot)) { // LINE: 503
      throw new NotationError("Expected a final dot"); // LINE: 504
    }
    return new ReadSymbol(this).consume(c, null); // LINE: 506
  }

  public boolean moreParts(Map value) { // LINE: 508
    throw new RuntimeException(); // LINE: 509
  }

  public void declare() { // LINE: 511
    throw new RuntimeException(); // LINE: 512
  }
}
